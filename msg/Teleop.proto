syntax = "proto2";
package apb;

import "nanopb.proto";
import "Types.proto";
import "CommonMsg.proto";

//Configure the robot match paramters
message ConfigureMatch
{
	required uint32 strategy = 1;
	required eColor matchColor = 2;
}

//request the robot to turn to head to destination, then go ahead
message RequestGoto {
	required Point			target				= 1;
	required eDir			direction			= 2;
}

//relative motion order to go in straight line
message RequestGotoCap {
	required PointCap		target				= 1;
	required eDir			direction			= 2;
}

message Log {
	required uint32			date				= 1;
	required eLogLevel		level				= 2;
	required string			text				= 3 [(nanopb).max_size = 200];
}

//feedback on Robot low level states
message RSPState
{
	required eNavState 		navState 			= 10; //current motion state
	required eNavOrder		navOrder			= 11; //current motion order
	required PointCap		position			= 12; //robot position
}

//----------------------------------------------------------------------
// Multiplexer : this message is used to encapsulate all the other
//               so that several messages can be sent on the same
//               communication link.
//----------------------------------------------------------------------

message TeleopRequest
{
	oneof type
	{
		//messages from 0 to 99 are general purpose messages
		EmptyMsg 			getOsStats 			= 1;

		//messages from 100 to 199 are reserved fo strategy
		ConfigureMatch 		configureMatch 		= 100;
		EmptyMsg 			startMatch 			= 101;

		//messages from 200 to 299 are reserved fo navigation
		PointCap			setPosition			= 200;
		RequestGoto        	requestGoto			= 210;
		RequestGotoCap      requestGotoCap		= 211;
	}
}

message TeleopResponse
{
	oneof type
	{
		Log					log					= 1;
		EmptyMsg 			osStats 			= 2;
		RSPState			rspState			= 200;

	}
}