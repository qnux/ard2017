/*
 * TeleopThread.cpp
 *
 *  Created on: 20 oct. 2016
 *      Author: wix
 */

#include "TeleopThread.h"
#include "Robot2017.h"

using namespace ard;

void TeleopThread::init()
{
    //create the thread
    g_ArdOs.createThread_Cpp("Teleop", *this, STACK_LOG, PRIO_LOG);
}

void TeleopThread::run()
{
    //use this function to shortcut the google protobuf layer in case you want a simple way of commanding the robot.
    //simpleSerialRun();

    while (2)
    {
        while (Serial.available())
        {
            // get the new byte:
            char inChar = (char)Serial.read();
            // Pass all incoming data to hdlc char receiver
            Hdlc::receiveNextByte(inChar);
        } //end while serial available
        vTaskDelay(1);
    } //end while(2)
}

void TeleopThread::sendByte(uint8_t data)
{
    Serial.print(data);
}

void TeleopThread::handleFrame(const uint8_t *framebuffer, uint16_t framelength)
{
    LOG(INFO, "Command protobuf received. size=" + framelength);
}

void TeleopThread::simpleSerialRun()
{
    while (2)
    {
        while (Serial.available())
        {
            auto cmd = Serial.read();
            LOG(INFO, "Command received : " + cmd);
            switch (cmd)
            {
            case 's': //Stats
            {
                g_ArdOs.displayStats();
                break;
            }

            case 'c': //configure
            {
                LOG(INFO, "configure match request received.");
                ROBOT.strategy.configureMatch(0, eColor::PREF);
                events[EVT_CONFIGURE].publish();
                break;
            }

            case 'g': //go
            {
                LOG(INFO, "start match request received.");
                events[EVT_START_MATCH].publish();
                break;
            }

            default:
            { //nothing done for now as pollution is generated by end of line characters
                LOG(DEBUG, "Teleop cmd " + String(cmd) + " unknown.");
                break;
            }
        }
    } //end while serial available
    vTaskDelay(1);
} //end while(2)
}

IEvent* TeleopThread::getEvent(eTeleopEvtId id)
{
    return &events[id];
}
